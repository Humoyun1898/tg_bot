import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from products import categories, category_units
from keyboards import main_menu, category_keyboard, remove_menu
from storage import user_data

API_TOKEN = "8199829547:AAEhP9S6kjWFYxiX5U7mdHYjZA9e_RMeKTo"
OWNER_ID = 5914148670

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {"cart": [], "stage": "awaiting_name"}
    await message.answer("\U0001F44B –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ñ–∏—Ä–º—ã –∏–ª–∏ –∏–º—è, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞.")

@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id
    state = user_data[user_id]["stage"]
    text = message.text

    if state == "awaiting_name":
        user_data[user_id]["name"] = text
        user_data[user_id]["stage"] = "choosing_category"
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=main_menu)

    elif text in categories:
        user_data[user_id]["category"] = text
        user_data[user_id]["stage"] = "choosing_product"
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ {text}:", reply_markup=category_keyboard(text))

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user_data[user_id]["stage"] = "choosing_category"
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=main_menu)

    elif state == "choosing_product" and any(text in products for products in categories.values()):
        user_data[user_id]["product"] = text
        user_data[user_id]["stage"] = "awaiting_quantity"
        category = user_data[user_id]["category"]
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {category_units[category]}:")

    elif state == "awaiting_quantity":
        if not text.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        product = user_data[user_id]["product"]
        user_data[user_id]["cart"].append((product, text))
        user_data[user_id]["stage"] = "choosing_category"
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=main_menu)

    elif text == "üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        cart = user_data[user_id]["cart"]
        if not cart:
            await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        else:
            summary = "\n".join([f"{p} ‚Äî {q}" for p, q in cart])
            await message.answer(
                f"–í–∞—à –∑–∞–∫–∞–∑:\n{summary}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑? (–¥–∞/–Ω–µ—Ç)\n–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.",
                reply_markup=remove_menu
            )

    elif text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üóëÔ∏è":
        cart = user_data[user_id]["cart"]
        if not cart:
            await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return
        delete_kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for p, q in cart:
            delete_kb.add(f"{p} ‚Äî {q}")
        delete_kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        user_data[user_id]["stage"] = "awaiting_delete"
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_kb)

    elif user_data[user_id]["stage"] == "awaiting_delete":
        product_line = text
        cart = user_data[user_id]["cart"]
        new_cart = [item for item in cart if f"{item[0]} ‚Äî {item[1]}" != product_line]
        if len(cart) != len(new_cart):
            user_data[user_id]["cart"] = new_cart
            await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=main_menu)
        else:
            await message.answer("‚ùå –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_data[user_id]["stage"] = "choosing_category"

    elif text.lower() == "–¥–∞":
        name = user_data[user_id]["name"]
        summary = "\n".join([f"{p} ‚Äî {q}" for p, q in user_data[user_id]["cart"]])
        await bot.send_message(OWNER_ID, f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {name}:\n{summary}")
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
        user_data[user_id]["cart"] = []

    elif text.lower() == "–Ω–µ—Ç":
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä.", reply_markup=main_menu)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
